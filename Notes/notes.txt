npm init -> creates package.json

bundlers ->
    A bundler is a tool that bundles our app, packages our app so that it can be shipped to production.
    webpack, parcel, vite (parcel is used here)
    NOTE: In create-react-app, the bundler used is webpack

dependencies ->
    1. devDependencies: required in development phase. (e.g. npm install -d parcel -> here -D is for dev dependency)
    2. normal dependencies: used in production.

tilde and caret

installing any package installs transitive packages also (its dependent packages)

npm -> installing package
npx -> executing package

scripts can be configured in package.json file

all the data under root id will get replaced when rendering is done to that particular HTML tag.

JSX code is transpiled before it reaches to JS => Transpilation is done by parcel (especially babel transpiles that code, JSX->react) 
JSX => react.createElement => react element - JS object => HTML element (render)

React functional component is a JavaScript function that returns a piece of JSX code or
a JS function that returns a React element.

*congfig driven UI

useState-> whenever a state variable updates, react rerenders the component (react triggers reconsiliation cycle).

useEffect-> when component gets re-rendered, callback function in useEffect gets called.

Chunking/ Code Splitting/ Dynamic Bundling/ Lazy Loading/ On Demand Loading/ Dynamic import

sass, scss, styled-components, material-ui, ant design, chakra-ui, bootstrap, tailwind css.

When to Use Props vs Context:
Scenario    ->  Use Props   ->  Use Context
1. Data sharing between parent and child	✅ Ideal for passing data from parent to child	❌ Not needed unless the data needs to be global
2. Deeply nested components	❌ Can lead to prop drilling	✅ Avoids prop drilling, makes data accessible to deeply nested components
3. Global state (e.g., theme, authentication)	❌ Not ideal for global data, can be cumbersome	✅ Perfect for global shared data across many components
4. Single-use component data	✅ Use props for data that is local to a specific component	❌ Overhead for one-off data needs
5. Shared data across multiple components	❌ Requires passing props down through multiple levels	✅ Use context to share the data with many components